<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<org.eventb.theory.core.theoryRoot org.eventb.core.configuration="org.eventb.theory.core.thy">
<org.eventb.theory.core.importTheoryProject name="'" org.eventb.theory.core.importTheoryProject="/Monoids-gen">
<org.eventb.theory.core.importTheory name="'" org.eventb.theory.core.importTheory="/Monoids-gen/Monoid0.dtf|org.eventb.theory.core.deployedTheoryRoot#Monoid0"/>
</org.eventb.theory.core.importTheoryProject>
<org.eventb.theory.core.importTheoryProject name="(" org.eventb.theory.core.importTheoryProject="/pNat-gen">
<org.eventb.theory.core.importTheory name="'" org.eventb.theory.core.importTheory="/pNat-gen/pNat0.dtf|org.eventb.theory.core.deployedTheoryRoot#pNat0"/>
</org.eventb.theory.core.importTheoryProject>
<org.eventb.theory.core.typeParameter name=")" org.eventb.core.identifier="T_EvB"/>
<org.eventb.theory.core.newOperatorDefinition name="+" org.eventb.core.label="Monoid_raiseToL_M0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.operatorArgument name="'" org.eventb.core.expression="ℙ(T_EvB)" org.eventb.core.identifier="T"/>
<org.eventb.theory.core.operatorArgument name="(" org.eventb.core.expression="Monoid_T(T)" org.eventb.core.identifier="M"/>
<org.eventb.theory.core.operatorArgument name=")" org.eventb.core.expression="T" org.eventb.core.identifier="x"/>
<org.eventb.theory.core.operatorArgument name="*" org.eventb.core.expression="pNat" org.eventb.core.identifier="p"/>
<org.eventb.theory.core.recursiveOperatorDefinition name="+" org.eventb.theory.core.inductiveArgument="p">
<org.eventb.theory.core.recursiveDefinitionCase name="'" org.eventb.core.expression="zero" org.eventb.theory.core.formula="Monoid_ident(T, M)"/>
<org.eventb.theory.core.recursiveDefinitionCase name="(" org.eventb.core.expression="suc(ps)" org.eventb.theory.core.formula="Monoid_op(T, M)(x ↦ Monoid_raiseToL_M0(T, M, x, ps))"/>
</org.eventb.theory.core.recursiveOperatorDefinition>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.newOperatorDefinition name="*" org.eventb.core.label="Monoid_raiseToL" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.operatorArgument name="'" org.eventb.core.expression="ℙ(T_EvB)" org.eventb.core.identifier="T"/>
<org.eventb.theory.core.operatorArgument name="(" org.eventb.core.expression="Monoid_T(T)" org.eventb.core.identifier="M"/>
<org.eventb.theory.core.directOperatorDefinition name=")" org.eventb.theory.core.formula="λx ↦ p·x ∈ T ∧ p ∈ pNat ∣ Monoid_raiseToL_M0(T, M, x, p)"/>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.theorem name="," org.eventb.core.label="TypingTheorem raiseToL" org.eventb.core.predicate="∀T, equ, op, ident·T ∈ ℙ(T_EvB) ∧ T ↦ equ ↦ op ↦ ident ∈ Monoid_T(T) ⇒ (∀x, p·x ∈ T ∧ p ∈ pNat ⇒ (Monoid_raiseToL(T, T ↦ equ ↦ op ↦ ident)(x ↦ p) ∈ (T)))"/>
<org.eventb.theory.core.newOperatorDefinition name="." org.eventb.core.label="Monoid_raiseToR_M0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.operatorArgument name="'" org.eventb.core.expression="ℙ(T_EvB)" org.eventb.core.identifier="T"/>
<org.eventb.theory.core.operatorArgument name="(" org.eventb.core.expression="Monoid_T(T)" org.eventb.core.identifier="M"/>
<org.eventb.theory.core.operatorArgument name=")" org.eventb.core.expression="T" org.eventb.core.identifier="x"/>
<org.eventb.theory.core.operatorArgument name="*" org.eventb.core.expression="pNat" org.eventb.core.identifier="p"/>
<org.eventb.theory.core.recursiveOperatorDefinition name="+" org.eventb.theory.core.inductiveArgument="p">
<org.eventb.theory.core.recursiveDefinitionCase name="'" org.eventb.core.expression="zero" org.eventb.theory.core.formula="Monoid_ident(T, M)"/>
<org.eventb.theory.core.recursiveDefinitionCase name="(" org.eventb.core.expression="suc(ps)" org.eventb.theory.core.formula="Monoid_op(T, M)(Monoid_raiseToR_M0(T, M, x, ps) ↦ x)"/>
</org.eventb.theory.core.recursiveOperatorDefinition>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.newOperatorDefinition name="-" org.eventb.core.label="Monoid_raiseToR" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.operatorArgument name="'" org.eventb.core.expression="ℙ(T_EvB)" org.eventb.core.identifier="T"/>
<org.eventb.theory.core.operatorArgument name="(" org.eventb.core.expression="Monoid_T(T)" org.eventb.core.identifier="M"/>
<org.eventb.theory.core.directOperatorDefinition name=")" org.eventb.theory.core.formula="λx ↦ p·x ∈ T ∧ p ∈ pNat ∣ Monoid_raiseToR_M0(T, M, x, p)"/>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.theorem name="/" org.eventb.core.label="TypingTheorem raiseToR" org.eventb.core.predicate="∀T, equ, op, ident·T ∈ ℙ(T_EvB) ∧ T ↦ equ ↦ op ↦ ident ∈ Monoid_T(T) ⇒ (∀x, p·x ∈ T ∧ p ∈ pNat ⇒ (Monoid_raiseToR(T, T ↦ equ ↦ op ↦ ident)(x ↦ p) ∈ (T)))"/>
<org.eventb.theory.core.theorem name="0" org.eventb.core.label="RaiseToL Equiv Preservation:" org.eventb.core.predicate="∀T, equ, op, ident·T ∈ ℙ(T_EvB) ∧ T ↦ equ ↦ op ↦ ident ∈ Monoid_T(T) ⇒ (∀x, y, p·x ∈ T ∧ y ∈ T ∧ p ∈ pNat ⇒ ((equ(x ↦ y) = TRUE) ⇒ (equ(Monoid_raiseToL(T, T ↦ equ ↦ op ↦ ident)(x ↦ p) ↦ Monoid_raiseToL(T, T ↦ equ ↦ op ↦ ident)(y ↦ p)) = TRUE)))"/>
<org.eventb.theory.core.theorem name="1" org.eventb.core.label="RaiseToR Equiv Preservation:" org.eventb.core.predicate="∀T, equ, op, ident·T ∈ ℙ(T_EvB) ∧ T ↦ equ ↦ op ↦ ident ∈ Monoid_T(T) ⇒ (∀x, y, p·x ∈ T ∧ y ∈ T ∧ p ∈ pNat ⇒ ((equ(x ↦ y) = TRUE) ⇒ (equ(Monoid_raiseToR(T, T ↦ equ ↦ op ↦ ident)(x ↦ p) ↦ Monoid_raiseToR(T, T ↦ equ ↦ op ↦ ident)(y ↦ p)) = TRUE)))"/>
<org.eventb.theory.core.theorem name="2" org.eventb.core.label="RaiseToL addRule:" org.eventb.core.predicate="∀T, equ, op, ident·T ∈ ℙ(T_EvB) ∧ T ↦ equ ↦ op ↦ ident ∈ Monoid_T(T) ⇒ (∀x, p, q·x ∈ T ∧ p ∈ pNat ∧ q ∈ pNat ⇒ equ(op(Monoid_raiseToL(T, T ↦ equ ↦ op ↦ ident)(x ↦ p) ↦ Monoid_raiseToL(T, T ↦ equ ↦ op ↦ ident)(x ↦ q)) ↦ Monoid_raiseToL(T, T ↦ equ ↦ op ↦ ident)(x ↦ (p) pNat_add (q))) = TRUE)"/>
</org.eventb.theory.core.theoryRoot>
