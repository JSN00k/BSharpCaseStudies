package pNat

From Relations Import Relations.*

Datatype pNat
| zero
| suc(prev : pNat) {
	add(x, y : pNat) : pNat INFIX 100 
		match x {
			| zero : y
			| suc(xs) : suc(xs add y)
		} 
	
	add2(x : pNat) : pNat suc(suc(x)) 
	
	Instance Setoid<pNat>([=])
	
	Theorems {
		suc out of addition:
		  ∀ x, y : pNat · x add suc(y) = suc(x add y);
		add zero:
		  ∀ x : pNat · x add zero = x;
		reduction:
		  ∀ x, y, z : pNat · x add y = x add z ⇔ y = z;
		Associative:
		  ∀ x, y, z : pNat · x add (y add z) = (x add y) add z;
		Commutative:
		  ∀ x, y : pNat · x add y = y add x;
	}
} 

From Monoids Import Monoid.* 
CommMonoid.*

Extend pNat (mon_Add) {
	Instance CommMonoid<pNat>(add, zero) addMon (times = raiseToL) 
	
	Theorems {
		Anything times zero on left:
			∀ x : pNat · times(x, zero) = zero; 
		Zero times anything is Zero:
			∀ x : pNat · times(zero, x) = zero;
		sucX times Y:
			∀ x, y : pNat · times(suc(x), y) = y add times(x, y);
		Distrib Left Times:
			∀ x, y, z : pNat · times(x, y add z) = times(x, y) add times(x, z);
		Distrib Right Times:
			∀ x, y, z : pNat · times(y add z, x) = times(y, x) add times(z, x);
		Times Associative:
		    ∀ x, y, z : pNat · times(x, times(y, z)) = times(times(x, y), z);
		Times Commutative:
		    ∀ x, y : pNat · times(x, y) = times(y, x);
	}
	
	Instance CommMonoid<pNat>(times, suc(zero)) timesMon (power = raiseToL) 
}

Extend pNat (minus) {
		decr(x : pNat) : pNat
		match x {
			| zero : zero
			| suc(xs) : xs 
		}
	
	minus(x, y : pNat) : pNat INFIX 99 
		match y {
			| zero : x
			| suc(ys) : decr(x minus ys)
		}
}

Extend pNat (divide) {
	divMod(n, d, count : pNat) : pNat × pNat 
	  match n {
	  	| zero : (zero, zero)
	  	| suc(ns) : 
	  		if suc(ns) = d {
	  			(suc(count), zero)
	  		} else {
	  			if suc(ns) minus d = zero {
	  				(count, suc(ns))
	  			} else {
	  				divMod(suc(ns) minus d, d, suc(count))
	  			}
	  		}
	  	}
}

