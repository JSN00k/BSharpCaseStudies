package Groups

From Monoids Import Monoid.*

Class Group[G] : Monoid where ∀ x : G · ∃ y : G · equ(op(x, y), ident) ∧ equ(op(y, x), ident) {	
	Theorems {
		Indent Unique:
		  ∀ x, y : G · equ(op(x, y), y) ⇔ equ(x, ident);
		Inv unique:
		  ∀ a, b, c : G · equ(op(a, b), ident)  ⇒ equ(op(b, a), ident);
		Op Inverse:
		  ∀ a, b, x, y : G · equ(op(a, x), ident) ∧ equ(op(b, y), ident) ⇔ equ(op(op(a, b), op(y, x)), ident);
		Cancellation Law:
		  ∀ a, b, c : G · equ(op(a, c), op(b, c)) ⇔ equ(a, b);
		a squared equ a implies a equ ident:
		  ∀ a : G · equ(op(a, a), a) ⇒ equ(a, ident);
		Inverse Func:
		  ∃ inv : G → G · (∀ x : G · equ(op(inv(x), x), ident));
	}
} 